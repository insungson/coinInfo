{"version":3,"file":"static/js/922.a72d0474.chunk.js","mappings":"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","sources":["chartoptions/setApexchart.ts","components/chart.tsx","utils/api.ts"],"sourcesContent":["import { IHistorical, IChartOptions, ICandleChartOption } from \"@models/price\";\r\nimport moment from \"moment\";\r\n\r\nexport class ApexChartOption {\r\n  public data: IHistorical[];\r\n  constructor(data: IHistorical[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  getPriceChartOptions(): IChartOptions {\r\n    return {\r\n      type: \"line\",\r\n      series: [\r\n        {\r\n          name: \"Price\",\r\n          data: this.data?.map((price) => price.close),\r\n        },\r\n      ],\r\n      options: {\r\n        theme: {\r\n          mode: \"dark\",\r\n        },\r\n        chart: {\r\n          height: 300,\r\n          width: 500,\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          background: \"transparent\",\r\n        },\r\n        grid: { show: false },\r\n        stroke: {\r\n          curve: \"smooth\",\r\n          width: 4,\r\n        },\r\n        yaxis: {\r\n          show: false,\r\n        },\r\n        xaxis: {\r\n          axisBorder: { show: false },\r\n          axisTicks: { show: false },\r\n          labels: { show: false },\r\n          type: \"datetime\",\r\n          categories: this.data?.map((price) => price.time_close),\r\n        },\r\n        fill: {\r\n          type: \"gradient\",\r\n          gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n        },\r\n        colors: [\"#0fbcf9\"],\r\n        tooltip: {\r\n          y: {\r\n            formatter: (value) => `$${value.toFixed(2)}`,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  getCandleStickChartOption(): ICandleChartOption {\r\n    return {\r\n      type: \"candlestick\",\r\n      height: 350,\r\n      series: [\r\n        {\r\n          name: \"CandleChart\",\r\n          data: this.data.map((obj) => ({\r\n            x: new Date(obj.time_close),\r\n            y: [obj.open, obj.high, obj.low, obj.close],\r\n          })),\r\n        },\r\n      ],\r\n      options: {\r\n        chart: {\r\n          type: \"candlestick\",\r\n          height: 350,\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          background: \"transparent\",\r\n        },\r\n        // title: {\r\n        //   text: \"CandleStick Chart\",\r\n        //   align: \"left\",\r\n        // },\r\n        grid: { show: false },\r\n        xaxis: {\r\n          type: \"category\",\r\n          axisBorder: { show: false },\r\n          axisTicks: { show: false },\r\n          // labels: { show: false },\r\n          labels: {\r\n            show: false,\r\n            formatter: function (val: any) {\r\n              return moment(val).format(\"MMM DD HH:mm\");\r\n            },\r\n          },\r\n        },\r\n        yaxis: {\r\n          tooltip: {\r\n            enabled: true,\r\n          },\r\n          show: false,\r\n        },\r\n        tooltip: {\r\n          enabled: true,\r\n          theme: \"dark\",\r\n        },\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"@utils/api\";\r\nimport ApexCharts from \"react-apexcharts\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\n\r\nimport { IHistorical, ChartProps, IChartOptions } from \"@models/price\";\r\nimport { ApexChartOption } from \"@chartoptions/setApexchart\";\r\n\r\nconst Chart = ({ coinId }: ChartProps) => {\r\n  console.log(\"chart coinId: \", coinId);\r\n  const [chartoptions, setChartoptions] = useState<IChartOptions | null>(null);\r\n\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      console.log(\"data777: \", data);\r\n      setChartoptions(new ApexChartOption(data).getPriceChartOptions());\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <RingLoader />\r\n      ) : (\r\n        chartoptions && (\r\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n          //@ts-ignore  // ApexCharts 의 type을 전부 맞추기 어렵기 때문에 이렇게 처리함.\r\n          <ApexCharts {...chartoptions} />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport const fetchCoins = async () => {\r\n  const response = await (await fetch(`${BASE_URL}/coins`)).json();\r\n  return response;\r\n};\r\n\r\nexport const fetchCoinInfo = async (coinId?: string) => {\r\n  return await (await fetch(`${BASE_URL}/coins/${coinId}`)).json();\r\n};\r\n\r\n// export function fetchCoinInfo(coinId: string) {\r\n//   return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n//     response.json()\r\n//   );\r\n// }\r\n\r\nexport function fetchCoinTickers(coinId?: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId}`\r\n  ).then((response) => response.json());\r\n}\r\n"],"names":["ApexChartOption","data","this","type","series","name","map","price","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","obj","x","Date","open","high","low","val","moment","format","enabled","coinId","console","log","useState","chartoptions","setChartoptions","useQuery","fetchCoinHistory","refetchInterval","isLoading","useEffect","getPriceChartOptions","BASE_URL","fetchCoins","fetch","json","response","fetchCoinInfo","fetchCoinTickers","then","Math","floor","now"],"sourceRoot":""}