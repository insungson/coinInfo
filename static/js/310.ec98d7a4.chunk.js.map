{"version":3,"file":"static/js/310.ec98d7a4.chunk.js","mappings":"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","sources":["atoms/memosAtom.ts","components/memoForm.tsx","components/memos.tsx","components/styledComponents/memos.tsx"],"sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum MemoState {\r\n  \"planingToBuy\" = \"PlaningToBuy\",\r\n  \"completedDeal\" = \"CompletedDeal\",\r\n}\r\n\r\nexport interface IMemos {\r\n  id: number; // 메모아이디.. 날짜 -> 최초 입력 시 날짜 -> 숫자로 컨버팅\r\n  text: string; // 메모한것\r\n  buyPrice: number; // 구입 가격\r\n  coinNumber: number; // 구입 갯수\r\n  targetPrice: number; // 목표 가격\r\n  sellPrice?: number; // 판 가격\r\n  coinType: string; // 코인타입\r\n  writedAt: number; // 최초 작성날짜\r\n  memoState: MemoState; // 메모 상태\r\n  modifiedAt?: number; // 마지막 수정날짜\r\n  isModified: boolean; // 1회 이상 수정 시 true 처리\r\n}\r\n\r\n// 전체 메모정보\r\nexport const memosState = atom<IMemos[]>({\r\n  key: \"memosState\",\r\n  default: [],\r\n});\r\n\r\n// 현재 위치한 코인페이지\r\nexport const currentCoinPage = atom<string | null>({\r\n  key: \"currentCoinPage\",\r\n  default: null,\r\n});\r\n\r\n// 코인 타입 리스트 모음\r\nexport const coinListState = atom<string[] | null>({\r\n  key: \"coinListState\",\r\n  default: null,\r\n});\r\n\r\n// 현재 코인 페이지의 코인 목록만 가져옮\r\nexport const getOneCoinMemos = selector({\r\n  key: \"getOneCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    const currentPage = get(currentCoinPage);\r\n    return allMemos.filter((item) => item.coinType === currentPage);\r\n  },\r\n});\r\n\r\n// 전체 코인을 코인 타입으로 나누고, 메모 상태로 구분하여 보여준다\r\nexport const getAllCoinMemos = selector({\r\n  key: \"getAllCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    // 코인타입리스트 불러오기\r\n    const coinTypeList = allMemos?.map((item) => item.coinType);\r\n  },\r\n});\r\n","import { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { coinListState, memosState, MemoState } from \"@atoms/memosAtom\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { IMemos } from \"@atoms/memosAtom\";\r\nimport { FormBox, FromItem, Button } from \"@components/styledComponents/memos\";\r\n\r\nconst MemoForm = ({ coinName }: { coinName: string | null }) => {\r\n  const [coinNameList, setCoinNameList] = useRecoilState(coinListState);\r\n  const setMemoState = useSetRecoilState(memosState);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<IMemos>();\r\n\r\n  const onSubmit: SubmitHandler<IMemos> = (data) => {\r\n    console.log(\"SubmitData: \", data);\r\n    setMemoState((prev) =>\r\n      prev.concat({\r\n        id: Date.now(),\r\n        text: data.text,\r\n        buyPrice: data.buyPrice,\r\n        coinType: data.coinType,\r\n        coinNumber: data.coinNumber,\r\n        targetPrice: data.targetPrice,\r\n        writedAt: Date.now(),\r\n        memoState: MemoState.planingToBuy,\r\n        isModified: false,\r\n      })\r\n    );\r\n    reset();\r\n  };\r\n\r\n  // const onSelectCoinName = (event: FormEvent<HTMLSelectElement>) => {\r\n  //   const { value } = event.currentTarget;\r\n  // };\r\n\r\n  return (\r\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n      <FromItem>\r\n        <span>Select Coin: </span>\r\n        <span>\r\n          {coinNameList && coinNameList?.length > 0 ? (\r\n            <select\r\n              defaultValue={coinName === null ? coinNameList[0] : coinName}\r\n              disabled={coinName === null ? false : true}\r\n              {...register(\"coinType\", { required: \"You have to Select one\" })}\r\n            >\r\n              {coinNameList.map((coinName) => (\r\n                <option key={coinName} value={coinName}>\r\n                  {coinName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          ) : (\r\n            <>there is no coinNameList</>\r\n          )}\r\n        </span>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Buy Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"buyPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.buyPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Target Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"targetPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.targetPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Coin Number To Buy: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"coinNumber\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.coinNumber?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Memo for your Trade</span>\r\n        <span>\r\n          <textarea\r\n            {...register(\"text\", {\r\n              required: \"write at least one letter\",\r\n              validate: {\r\n                letter: (value) =>\r\n                  value.trim().length === 0\r\n                    ? \"write at least one letter\"\r\n                    : true,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.text?.message}</p>\r\n      </FromItem>\r\n      <FromItem>\r\n        <Button>Submit</Button>\r\n      </FromItem>\r\n    </FormBox>\r\n  );\r\n};\r\n\r\nexport default MemoForm;\r\n","import {\r\n  Container,\r\n  Header,\r\n  Title,\r\n  Input,\r\n  Textarea,\r\n  Button,\r\n  MemoList,\r\n  Memo,\r\n  Loader,\r\n} from \"@components/styledComponents/memos\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport MemoForm from \"@components/memoForm\";\r\n\r\nconst Memos = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const backToCoinList = () => {\r\n    navigate(\"/\");\r\n  };\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>MemoList</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Button onClick={backToCoinList}>코인 리스트 보기</Button>\r\n        <Title>메모 목록</Title>\r\n      </Header>\r\n      <MemoForm coinName={null} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Memos;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const MemoList = styled.ul``;\r\n\r\nexport const Memo = styled.li`\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Title = styled.span`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nexport const Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const Textarea = styled.textarea``;\r\n\r\nexport const Button = styled.button`\r\n  padding: 0.5em;\r\n  border-radius: 6px;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nexport const FormBox = styled.form`\r\n  display: block;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const FromItem = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  align-content: center;\r\n  width: 80%;\r\n  margin-top: 10px;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-top: 5px;\r\n    margin-left: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n  span:last-child {\r\n    margin-left: 10px;\r\n    /* margin-top: 5px; */\r\n  }\r\n  p {\r\n    color: ${(props) => props.theme.textColor};\r\n    font-size: 10px;\r\n  }\r\n`;\r\n"],"names":["MemoState","memosState","atom","key","default","currentCoinPage","coinListState","selector","get","allMemos","currentPage","filter","item","coinType","map","coinName","useRecoilState","coinNameList","setMemoState","useSetRecoilState","useForm","register","handleSubmit","errors","formState","reset","onSubmit","data","console","log","prev","concat","id","Date","now","text","buyPrice","coinNumber","targetPrice","writedAt","memoState","isModified","length","defaultValue","disabled","required","value","valueAsNumber","validate","positive","message","letter","trim","navigate","useNavigate","onClick","Container","styled","Header","props","theme","textColor","bgColor","Title","Button","FormBox","FromItem"],"sourceRoot":""}