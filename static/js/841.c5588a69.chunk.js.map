{"version":3,"file":"static/js/841.c5588a69.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createClass.js","chartoptions/setApexchart.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","components/chart.tsx","utils/api.ts"],"sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import { IHistorical, IChartOptions } from \"@models/price\";\r\n\r\nexport class ApexChartOption {\r\n  public data: IHistorical[];\r\n  constructor(data: IHistorical[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  getPriceChartOptions(): IChartOptions {\r\n    return {\r\n      type: \"line\",\r\n      series: [\r\n        {\r\n          name: \"Price\",\r\n          data: this.data?.map((price) => price.close),\r\n        },\r\n      ],\r\n      options: {\r\n        theme: {\r\n          mode: \"dark\",\r\n        },\r\n        chart: {\r\n          height: 300,\r\n          width: 500,\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          background: \"transparent\",\r\n        },\r\n        grid: { show: false },\r\n        stroke: {\r\n          curve: \"smooth\",\r\n          width: 4,\r\n        },\r\n        yaxis: {\r\n          show: false,\r\n        },\r\n        xaxis: {\r\n          axisBorder: { show: false },\r\n          axisTicks: { show: false },\r\n          labels: { show: false },\r\n          type: \"datetime\",\r\n          categories: this.data?.map((price) => price.time_close),\r\n        },\r\n        fill: {\r\n          type: \"gradient\",\r\n          gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n        },\r\n        colors: [\"#0fbcf9\"],\r\n        tooltip: {\r\n          y: {\r\n            formatter: (value) => `$${value.toFixed(2)}`,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n}\r\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import { useState, useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"@utils/api\";\r\nimport ApexCharts from \"react-apexcharts\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\n\r\nimport { IHistorical, ChartProps, IChartOptions } from \"@models/price\";\r\nimport { ApexChartOption } from \"@chartoptions/setApexchart\";\r\n\r\nconst Chart = ({ coinId }: ChartProps) => {\r\n  console.log(\"chart coinId: \", coinId);\r\n  const [chartoptions, setChartoptions] = useState<IChartOptions | null>(null);\r\n\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      console.log(\"data777: \", data);\r\n      setChartoptions(new ApexChartOption(data).getPriceChartOptions());\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <RingLoader />\r\n      ) : (\r\n        chartoptions && (\r\n          <ApexCharts\r\n            type={chartoptions.type}\r\n            series={chartoptions.series}\r\n            options={{\r\n              theme: {\r\n                mode: \"dark\",\r\n              },\r\n              chart: {\r\n                height: 300,\r\n                width: 500,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                background: \"transparent\",\r\n              },\r\n              grid: { show: false },\r\n              stroke: {\r\n                curve: \"smooth\",\r\n                width: 4,\r\n              },\r\n              yaxis: {\r\n                show: false,\r\n              },\r\n              xaxis: {\r\n                axisBorder: { show: false },\r\n                axisTicks: { show: false },\r\n                labels: { show: false },\r\n                type: \"datetime\",\r\n                categories: data?.map((price) => price.time_close),\r\n              },\r\n              fill: {\r\n                type: \"gradient\",\r\n                gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n              },\r\n              colors: [\"#0fbcf9\"],\r\n              tooltip: {\r\n                y: {\r\n                  formatter: (value) => `$${value.toFixed(2)}`,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        )\r\n        // <ApexCharts\r\n        //   type=\"line\"\r\n        //   series={[\r\n        //     {\r\n        //       name: \"Price\",\r\n        //       data: data?.map((price) => price.close) as [],\r\n        //     },\r\n        //   ]}\r\n        //   options={{\r\n        //     theme: {\r\n        //       mode: \"dark\",\r\n        //     },\r\n        //     chart: {\r\n        //       height: 300,\r\n        //       width: 500,\r\n        //       toolbar: {\r\n        //         show: false,\r\n        //       },\r\n        //       background: \"transparent\",\r\n        //     },\r\n        //     grid: { show: false },\r\n        //     stroke: {\r\n        //       curve: \"smooth\",\r\n        //       width: 4,\r\n        //     },\r\n        //     yaxis: {\r\n        //       show: false,\r\n        //     },\r\n        //     xaxis: {\r\n        //       axisBorder: { show: false },\r\n        //       axisTicks: { show: false },\r\n        //       labels: { show: false },\r\n        //       type: \"datetime\",\r\n        //       categories: data?.map((price) => price.time_close),\r\n        //     },\r\n        //     fill: {\r\n        //       type: \"gradient\",\r\n        //       gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n        //     },\r\n        //     colors: [\"#0fbcf9\"],\r\n        //     tooltip: {\r\n        //       y: {\r\n        //         formatter: (value) => `$${value.toFixed(2)}`,\r\n        //       },\r\n        //     },\r\n        //   }}\r\n        // />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport const fetchCoins = async () => {\r\n  const response = await (await fetch(`${BASE_URL}/coins`)).json();\r\n  return response;\r\n};\r\n\r\nexport const fetchCoinInfo = async (coinId?: string) => {\r\n  return await (await fetch(`${BASE_URL}/coins/${coinId}`)).json();\r\n};\r\n\r\n// export function fetchCoinInfo(coinId: string) {\r\n//   return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n//     response.json()\r\n//   );\r\n// }\r\n\r\nexport function fetchCoinTickers(coinId?: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId}`\r\n  ).then((response) => response.json());\r\n}\r\n"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","ApexChartOption","data","instance","Constructor","TypeError","this","protoProps","staticProps","type","series","name","map","price","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","prototype","coinId","console","log","useState","chartoptions","setChartoptions","useQuery","fetchCoinHistory","refetchInterval","isLoading","useEffect","getPriceChartOptions","BASE_URL","fetchCoins","fetch","json","response","fetchCoinInfo","fetchCoinTickers","then","Math","floor","Date","now"],"sourceRoot":""}