{"version":3,"file":"static/js/513.2a6ed049.chunk.js","mappings":"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","sources":["atoms/memosAtom.ts","components/memoForm.tsx","components/styledComponents/memoList.tsx","components/memoModifyForm.tsx","components/memosListLiWrapper.tsx","components/memosListNormal.tsx","components/memosList.tsx","components/styledComponents/memos.tsx"],"sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum MemoState {\r\n  \"planingToBuy\" = \"PlaningToBuy\",\r\n  \"completedDeal\" = \"CompletedDeal\",\r\n}\r\n\r\nexport interface IMemos {\r\n  id: number; // 메모아이디.. 날짜 -> 최초 입력 시 날짜 -> 숫자로 컨버팅\r\n  text: string; // 메모한것\r\n  buyPrice: number; // 구입 가격\r\n  coinNumber: number; // 구입 갯수\r\n  targetPrice: number; // 목표 가격\r\n  sellPrice?: number | null; // 판 가격\r\n  coinType: string; // 코인타입\r\n  writedAt: number; // 최초 작성날짜\r\n  memoState: MemoState; // 메모 상태\r\n  modifiedAt?: number; // 마지막 수정날짜\r\n  isModified: boolean; // 1회 이상 수정 시 true 처리\r\n  isModifyOpen: boolean; // 수정 폼 띄우기 여부\r\n}\r\n\r\n// 전체 메모정보\r\nexport const memosState = atom<IMemos[]>({\r\n  key: \"memosState\",\r\n  default: [],\r\n});\r\n\r\n// 현재 위치한 코인페이지\r\nexport const currentCoinPage = atom<string | null>({\r\n  key: \"currentCoinPage\",\r\n  default: null,\r\n});\r\n\r\n// 코인 타입 리스트 모음\r\nexport const coinListState = atom<string[] | null>({\r\n  key: \"coinListState\",\r\n  default: null,\r\n});\r\n\r\n// 현재 코인 페이지의 코인 목록만 가져옮\r\nexport const getOneCoinMemos = selector({\r\n  key: \"getOneCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    const currentPage = get(currentCoinPage);\r\n    return allMemos.filter((item) => item.coinType === currentPage);\r\n  },\r\n});\r\n\r\n// 전체 코인을 코인 타입으로 나누고, 메모 상태로 구분하여 보여준다\r\nexport const getAllCoinMemos = selector({\r\n  key: \"getAllCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    // 코인타입리스트 불러오기 (중복제거 처리하기)\r\n    const coinTypeList = Array.from(\r\n      new Set(allMemos?.map((item) => item.coinType))\r\n    );\r\n    // [[{},{}],[{},{},{}], ...];  형태로 쪼개기\r\n    return coinTypeList.map((coinType) => {\r\n      return allMemos.filter((memoObj) => memoObj.coinType === coinType);\r\n    });\r\n  },\r\n});\r\n","import { useEffect } from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { coinListState, memosState, MemoState } from \"@atoms/memosAtom\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { IMemos } from \"@atoms/memosAtom\";\r\nimport { FormBox, FromItem, Button } from \"@components/styledComponents/memos\";\r\n\r\nconst MemoForm = ({ coinName }: { coinName: string | null }) => {\r\n  const [coinNameList, setCoinNameList] = useRecoilState(coinListState);\r\n  const setMemoState = useSetRecoilState(memosState);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    setValue,\r\n  } = useForm<IMemos>();\r\n\r\n  const onSubmit: SubmitHandler<IMemos> = (data) => {\r\n    console.log(\"SubmitData: \", data);\r\n    setMemoState((prev) =>\r\n      prev.concat({\r\n        id: Date.now(),\r\n        text: data.text,\r\n        buyPrice: data.buyPrice,\r\n        coinType: data.coinType,\r\n        coinNumber: data.coinNumber,\r\n        targetPrice: data.targetPrice,\r\n        writedAt: Date.now(),\r\n        memoState: MemoState.planingToBuy,\r\n        isModified: false,\r\n        isModifyOpen: false,\r\n      })\r\n    );\r\n    reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!!coinName) {\r\n      setValue(\"coinType\", coinName);\r\n    }\r\n  }, [coinName]);\r\n\r\n  // const onSelectCoinName = (event: FormEvent<HTMLSelectElement>) => {\r\n  //   const { value } = event.currentTarget;\r\n  // };\r\n\r\n  return (\r\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n      <FromItem>\r\n        <span>Select Coin: </span>\r\n        <span>\r\n          {coinNameList && coinNameList?.length > 0 ? (\r\n            <select\r\n              defaultValue={coinName === null ? coinNameList[0] : coinName}\r\n              disabled={coinName === null ? false : true}\r\n              {...register(\"coinType\", { required: \"You have to Select one\" })}\r\n            >\r\n              {coinNameList.map((coinName) => (\r\n                <option key={coinName} value={coinName}>\r\n                  {coinName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          ) : (\r\n            <>there is no coinNameList</>\r\n          )}\r\n        </span>\r\n        <p>{errors.coinType?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Buy Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"buyPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.buyPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Target Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"targetPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.targetPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Coin Number To Buy: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"coinNumber\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.coinNumber?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Memo for your Trade</span>\r\n        <span>\r\n          <textarea\r\n            {...register(\"text\", {\r\n              required: \"write at least one letter\",\r\n              validate: {\r\n                letter: (value) =>\r\n                  value.trim().length === 0\r\n                    ? \"write at least one letter\"\r\n                    : true,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.text?.message}</p>\r\n      </FromItem>\r\n      <FromItem>\r\n        <Button>Submit</Button>\r\n      </FromItem>\r\n    </FormBox>\r\n  );\r\n};\r\n\r\nexport default MemoForm;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MemoCardBox = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const MemoCardItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  span {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n    margin-left: 10px;\r\n  }\r\n  p {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-left: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const MemoCardItemSpan = styled.span`\r\n  font-size: 10px;\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  margin-bottom: 5px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nexport const MemoCardUl = styled.ul`\r\n  width: 80%;\r\n`;\r\n// 보통 리스트 카드\r\nexport const MemoCardLi = styled.li`\r\n  background-color: white;\r\n  color: #2f3640;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n// 수익난 리스트 카드\r\nexport const MemoCardLiProfit = styled.li`\r\n  background-color: greenyellow;\r\n  color: #2f3640;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n// 손실난 리스트 카드\r\nexport const MemoCardLiLoss = styled.li`\r\n  background-color: red;\r\n  color: #2f3640;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\n// 거래 완료된 li (TODO: 수익난것, 손실난것 구분처리 해보기)\r\nexport const MemoCardDoneLi = styled.li`\r\n  background-color: yellowgreen;\r\n  color: #2f3640;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\n// 버튼\r\nexport const Button = styled.button`\r\n  text-align: center;\r\n  padding: 0.5em;\r\n  border-radius: 6px;\r\n  background-color: #2f3640;\r\n  color: white;\r\n`;\r\n","import { FC, memo } from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { coinListState, memosState, MemoState } from \"@atoms/memosAtom\";\r\nimport { useForm, SubmitHandler, useWatch } from \"react-hook-form\";\r\nimport { IMemos } from \"@atoms/memosAtom\";\r\nimport { FormBox, FromItem, Button } from \"@components/styledComponents/memos\";\r\n\r\nconst MemoModifyForm: FC<{ memoObj: IMemos }> = ({ memoObj }) => {\r\n  const setMemoState = useSetRecoilState(memosState);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    formState: { errors },\r\n    reset,\r\n    control,\r\n  } = useForm<IMemos>({\r\n    defaultValues: {\r\n      text: memoObj.text,\r\n      buyPrice: memoObj.buyPrice,\r\n      coinType: memoObj.coinType,\r\n      coinNumber: memoObj.coinNumber,\r\n      targetPrice: memoObj.targetPrice,\r\n      memoState: memoObj.memoState,\r\n    },\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<IMemos> = (data) => {\r\n    console.log(\"SubmitData: \", data);\r\n    setMemoState((prev) => {\r\n      const objIndex = prev.findIndex((item) => item.id === memoObj.id);\r\n      // // setState 는 아래와 같이 수정하면 안되고..\r\n      // // return 에서 slice 함수를 사용하여 처리해야 한다.\r\n      // prev[objIndex] = {\r\n      //   ...prev[objIndex],\r\n      //   text: data.text,\r\n      //   buyPrice: data.buyPrice,\r\n      //   coinType: data.coinType,\r\n      //   coinNumber: data.coinNumber,\r\n      //   targetPrice: data.targetPrice,\r\n      //   memoState: data.memoState, // form 만들기\r\n      //   sellPrice: data?.sellPrice ?? 0, // 판 가격 MemoState.completedDeal 일때만 입력 가능!\r\n      //   isModified: true,\r\n      //   isModifyOpen: false,\r\n      // };\r\n      return [\r\n        ...prev.slice(0, objIndex),\r\n        {\r\n          ...prev[objIndex],\r\n          text: data.text,\r\n          buyPrice: data.buyPrice,\r\n          coinType: data.coinType,\r\n          coinNumber: data.coinNumber,\r\n          targetPrice: data.targetPrice,\r\n          memoState: data.memoState, // form 만들기\r\n          sellPrice: data?.sellPrice ?? 0, // 판 가격 MemoState.completedDeal 일때만 입력 가능!\r\n          isModified: true,\r\n          isModifyOpen: false,\r\n        },\r\n        ...prev.slice(objIndex + 1),\r\n      ];\r\n    });\r\n    reset();\r\n  };\r\n\r\n  // 아래의 방법으로 실시간 state 처럼 사용 가능!!\r\n  const memoStateWatch = useWatch({\r\n    control,\r\n    name: \"memoState\",\r\n  });\r\n  console.log(\"memoStateWatch: \", memoStateWatch);\r\n\r\n  return (\r\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n      <FromItem>\r\n        <span>Select Coin: </span>\r\n        <span>\r\n          <select disabled>\r\n            <option>{memoObj.coinType}</option>\r\n          </select>\r\n        </span>\r\n      </FromItem>\r\n      <FromItem>\r\n        <span>Memo State: </span>\r\n        <span>\r\n          <select {...register(\"memoState\")}>\r\n            <option value={MemoState.planingToBuy}>\r\n              {MemoState.planingToBuy}\r\n            </option>\r\n            <option value={MemoState.completedDeal}>\r\n              {MemoState.completedDeal}\r\n            </option>\r\n          </select>\r\n        </span>\r\n      </FromItem>\r\n      {memoStateWatch === MemoState.completedDeal && (\r\n        <FromItem>\r\n          <span>Sell Price: </span>\r\n          <span>\r\n            <input\r\n              {...register(\"sellPrice\", {\r\n                valueAsNumber: true,\r\n                required: \"only positive Number Available\",\r\n                validate: {\r\n                  //@ts-ignore\r\n                  positive: (value) => value > 0,\r\n                },\r\n              })}\r\n            />\r\n          </span>\r\n          <p>{errors.buyPrice?.message}</p>\r\n        </FromItem>\r\n      )}\r\n      <FromItem>\r\n        <span>Buy Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"buyPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.buyPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Target Price: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"targetPrice\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.targetPrice?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Coin Number To Buy: </span>\r\n        <span>\r\n          <input\r\n            {...register(\"coinNumber\", {\r\n              valueAsNumber: true,\r\n              required: \"only positive Number Available\",\r\n              validate: {\r\n                positive: (value) => value > 0,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n        <p>{errors.coinNumber?.message}</p>\r\n      </FromItem>\r\n\r\n      <FromItem>\r\n        <span>Memo for your Trade</span>\r\n        {/* <span>\r\n          <textarea\r\n            {...register(\"text\", {\r\n              required: \"write at least one letter\",\r\n              validate: {\r\n                letter: (value) =>\r\n                  value.trim().length === 0\r\n                    ? \"write at least one letter\"\r\n                    : true,\r\n              },\r\n            })}\r\n          />\r\n        </span> */}\r\n        <p>{errors.text?.message}</p>\r\n      </FromItem>\r\n      <FromItem>\r\n        <span>\r\n          <textarea\r\n            {...register(\"text\", {\r\n              required: \"write at least one letter\",\r\n              validate: {\r\n                letter: (value) =>\r\n                  value.trim().length === 0\r\n                    ? \"write at least one letter\"\r\n                    : true,\r\n              },\r\n            })}\r\n          />\r\n        </span>\r\n      </FromItem>\r\n      <FromItem>\r\n        <Button>Submit</Button>\r\n      </FromItem>\r\n    </FormBox>\r\n  );\r\n};\r\n\r\nexport default MemoModifyForm;\r\n","import { FC, ReactNode } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  MemoCardBox,\r\n  MemoCardItem,\r\n  MemoCardItemSpan,\r\n  MemoCardUl,\r\n  MemoCardLi,\r\n  MemoCardLiProfit,\r\n  MemoCardLiLoss,\r\n  Button,\r\n} from \"@components/styledComponents/memoList\";\r\nimport { IMemos, MemoState } from \"@atoms/memosAtom\";\r\nimport MemoModifyForm from \"./memoModifyForm\";\r\n\r\nconst MemosListLiWrapper: FC<{\r\n  itemObj: IMemos;\r\n  itemIndex: number;\r\n  children: ReactNode;\r\n}> = ({ itemObj, itemIndex, children }) => {\r\n  // MemoState.planingToBuy 일땐 그냥 MemoCardLi\r\n  if (itemObj.memoState === MemoState.planingToBuy) {\r\n    return <MemoCardLi key={itemIndex}>{children}</MemoCardLi>;\r\n  } else {\r\n    // MemoState.completedDeal 일땐\r\n    if (itemObj.sellPrice) {\r\n      // sellPrice - buyPrice > 0 ? MemoCardLiProfit : MemoCardLiLoss 처리\r\n      if (itemObj.sellPrice - itemObj.buyPrice > 0) {\r\n        return <MemoCardLiProfit key={itemIndex}>{children}</MemoCardLiProfit>;\r\n      } else {\r\n        return <MemoCardLiLoss key={itemIndex}>{children}</MemoCardLiLoss>;\r\n      }\r\n    } else {\r\n      return <MemoCardLi key={itemIndex}>{children}</MemoCardLi>;\r\n    }\r\n  }\r\n};\r\n\r\nexport default MemosListLiWrapper;\r\n","import { FC } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  MemoCardBox,\r\n  MemoCardItem,\r\n  MemoCardItemSpan,\r\n  MemoCardUl,\r\n  MemoCardLi,\r\n  MemoCardLiProfit,\r\n  MemoCardLiLoss,\r\n  Button,\r\n} from \"@components/styledComponents/memoList\";\r\nimport { IMemos } from \"@atoms/memosAtom\";\r\nimport MemoModifyForm from \"./memoModifyForm\";\r\nimport MemosListLiWrapper from \"./memosListLiWrapper\";\r\n\r\nconst MemosListNormal: FC<{\r\n  itemObj: IMemos;\r\n  itemIndex: number;\r\n  turnModifyForm: (obj: IMemos) => void;\r\n}> = ({ itemObj, itemIndex, turnModifyForm }) => {\r\n  return (\r\n    <>\r\n      {/* <MemoCardLi key={itemIndex}> */}\r\n      <MemosListLiWrapper itemObj={itemObj} itemIndex={itemIndex}>\r\n        {itemObj.isModified && (\r\n          <div>\r\n            <span>Modified!</span>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <span>Trade State</span>\r\n          <MemoCardItemSpan>{itemObj.memoState}</MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>{itemObj.isModified ? \"Last Modified :\" : \"Write Date :\"}</span>\r\n          <MemoCardItemSpan>\r\n            {moment(\r\n              itemObj.isModified ? itemObj.modifiedAt : itemObj.writedAt\r\n            ).format(\"YYYY-MM-DD\")}\r\n          </MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>BuyPrice :</span>\r\n          <MemoCardItemSpan>{itemObj.buyPrice}</MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>Bought Quantity :</span>\r\n          <MemoCardItemSpan>{itemObj.coinNumber}</MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>TargetPrice :</span>\r\n          <MemoCardItemSpan>{itemObj.targetPrice}</MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>Expected Profit :</span>\r\n          <MemoCardItemSpan>\r\n            $ {itemObj.buyPrice * itemObj.coinNumber}\r\n          </MemoCardItemSpan>\r\n        </div>\r\n        <div>\r\n          <span>Memo You wrote :</span>\r\n          <p>{itemObj.text}</p>\r\n        </div>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => turnModifyForm(itemObj)}>\r\n            수정 폼 켜기/끄기\r\n          </Button>\r\n        </div>\r\n        {/* </MemoCardLi> */}\r\n      </MemosListLiWrapper>\r\n      {itemObj.isModifyOpen && <MemoModifyForm memoObj={itemObj} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MemosListNormal;\r\n","import { FC, useCallback } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { MemoList, Memo, FromItem } from \"@components/styledComponents/memos\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  currentCoinPage,\r\n  getOneCoinMemos,\r\n  getAllCoinMemos,\r\n  MemoState,\r\n  IMemos,\r\n  memosState,\r\n} from \"@atoms/memosAtom\";\r\nimport moment from \"moment\";\r\nimport {\r\n  MemoCardBox,\r\n  MemoCardItem,\r\n  MemoCardItemSpan,\r\n  MemoCardUl,\r\n  MemoCardLi,\r\n  Button,\r\n} from \"@components/styledComponents/memoList\";\r\nimport MemoModifyForm from \"./memoModifyForm\";\r\nimport MemosListNormal from \"./memosListNormal\";\r\n\r\nconst MemosList: FC<{ coinType: string | null }> = ({ coinType }) => {\r\n  const setMemoState = useSetRecoilState(memosState);\r\n  // coinType 가 null 일땐 전체 메모를 불러오고\r\n  // 아닐땐 필터된 메모리스트를 가져온다.\r\n  const coinTypeMemo = useRecoilValue(getOneCoinMemos);\r\n  console.log(\"coinTypeMemo: \", coinTypeMemo);\r\n  const allCoinTypeMemos = useRecoilValue(getAllCoinMemos);\r\n  console.log(\"allCoinTypeMemos: \", allCoinTypeMemos);\r\n  // 버튼 클릭시 수정할 수 있는 수정 폼 컴포넌트 키기! setRecoil로 수정하기\r\n  const turnModifyForm = useCallback(\r\n    (itemObj: IMemos) => {\r\n      setMemoState((prev) => {\r\n        console.log(\"prev: \", prev);\r\n        const objIndex = prev.findIndex((item) => item.id === itemObj.id);\r\n        // prev[objIndex].isModifyOpen = true;\r\n        const currentIsModifyOpen = prev[objIndex].isModifyOpen;\r\n        // memoState 가 CompletedDeal 일땐 수정창 안열고, 그냥 alert만 띄우기\r\n        const currentMemoState = prev[objIndex].memoState;\r\n        if (currentMemoState === MemoState.planingToBuy) {\r\n          return [\r\n            ...prev.slice(0, objIndex),\r\n            {\r\n              ...prev[objIndex],\r\n              isModifyOpen: !currentIsModifyOpen,\r\n            },\r\n            ...prev.slice(objIndex + 1),\r\n          ];\r\n        } else {\r\n          alert(\"Sorry, CompleteDeal is disable to change!\");\r\n          return prev;\r\n        }\r\n      });\r\n    },\r\n    [setMemoState]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {coinType === null &&\r\n        (allCoinTypeMemos && allCoinTypeMemos.length > 0 ? (\r\n          allCoinTypeMemos.map((coinObj, coinObjIndex) => (\r\n            <MemoCardBox key={coinObjIndex}>\r\n              <div>{coinObj[0].coinType}</div>\r\n              <MemoCardItem>\r\n                <MemoCardUl>\r\n                  {coinObj.map((item, index) => (\r\n                    <>\r\n                      <MemosListNormal\r\n                        itemObj={item}\r\n                        itemIndex={index}\r\n                        turnModifyForm={turnModifyForm}\r\n                      />\r\n                    </>\r\n                  ))}\r\n                </MemoCardUl>\r\n              </MemoCardItem>\r\n            </MemoCardBox>\r\n          ))\r\n        ) : (\r\n          <>There is no List you are looking for..</>\r\n        ))}\r\n      {coinType !== null &&\r\n        (coinTypeMemo && coinTypeMemo.length > 0 ? (\r\n          <MemoCardBox>\r\n            <div>{coinTypeMemo[0].coinType}</div>\r\n            <MemoCardItem>\r\n              <MemoCardUl>\r\n                {coinTypeMemo.map((itemObj, itemIndex) => (\r\n                  <MemosListNormal\r\n                    itemObj={itemObj}\r\n                    itemIndex={itemIndex}\r\n                    turnModifyForm={turnModifyForm}\r\n                  />\r\n                ))}\r\n              </MemoCardUl>\r\n            </MemoCardItem>\r\n          </MemoCardBox>\r\n        ) : (\r\n          <>There is no List you are looking for..</>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MemosList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const MemoList = styled.ul``;\r\n\r\nexport const Memo = styled.li`\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Title = styled.span`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nexport const Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const Textarea = styled.textarea``;\r\n\r\nexport const Button = styled.button`\r\n  padding: 0.5em;\r\n  border-radius: 6px;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nexport const FormBox = styled.form`\r\n  display: block;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const FromItem = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  align-content: center;\r\n  width: 80%;\r\n  margin-top: 10px;\r\n  justify-content: space-between;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-top: 5px;\r\n    margin-left: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n  span:last-child {\r\n    margin-left: 10px;\r\n    float: right;\r\n    /* margin-top: 5px; */\r\n  }\r\n  p {\r\n    color: ${(props) => props.theme.textColor};\r\n    font-size: 10px;\r\n  }\r\n  input {\r\n    width: 100px;\r\n  }\r\n`;\r\n"],"names":["MemoState","memosState","atom","key","default","currentCoinPage","coinListState","getOneCoinMemos","selector","get","allMemos","currentPage","filter","item","coinType","getAllCoinMemos","Array","from","Set","map","memoObj","coinName","useRecoilState","coinNameList","setMemoState","useSetRecoilState","useForm","register","handleSubmit","errors","formState","reset","setValue","useEffect","onSubmit","data","console","log","prev","concat","id","Date","now","text","buyPrice","coinNumber","targetPrice","writedAt","memoState","isModified","isModifyOpen","length","defaultValue","disabled","required","value","message","valueAsNumber","validate","positive","letter","trim","MemoCardBox","styled","MemoCardItem","MemoCardItemSpan","MemoCardUl","MemoCardLi","MemoCardLiProfit","MemoCardLiLoss","Button","defaultValues","getValues","control","memoStateWatch","useWatch","name","objIndex","findIndex","slice","sellPrice","itemObj","itemIndex","children","turnModifyForm","moment","modifiedAt","format","style","textAlign","onClick","coinTypeMemo","useRecoilValue","allCoinTypeMemos","useCallback","currentIsModifyOpen","alert","coinObj","coinObjIndex","index","Container","Header","props","theme","textColor","bgColor","Title","FormBox","FromItem"],"sourceRoot":""}