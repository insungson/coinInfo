{"version":3,"file":"static/js/819.0006ee2a.chunk.js","mappings":"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","sources":["atoms/memosAtom.ts","components/styledComponents/coins.tsx","components/coins.tsx","utils/api.ts"],"sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport { ICoin } from \"@models/coins\";\r\n\r\nexport enum MemoState {\r\n  \"planingToBuy\" = \"PlaningToBuy\",\r\n  \"completedDeal\" = \"CompletedDeal\",\r\n}\r\n\r\nexport interface IMemos {\r\n  id: number; // 메모아이디.. 날짜 -> 최초 입력 시 날짜 -> 숫자로 컨버팅\r\n  text: string; // 메모한것\r\n  buyPrice: number; // 구입 가격\r\n  coinNumber: number; // 구입 갯수\r\n  targetPrice: number; // 목표 가격\r\n  sellPrice?: number | null; // 판 가격\r\n  coinType: string; // 코인타입\r\n  writedAt: number; // 최초 작성날짜\r\n  memoState: MemoState; // 메모 상태\r\n  modifiedAt?: number; // 마지막 수정날짜\r\n  isModified: boolean; // 1회 이상 수정 시 true 처리\r\n  isModifyOpen: boolean; // 수정 폼 띄우기 여부\r\n}\r\n\r\n// 전체 메모정보\r\nexport const memosState = atom<IMemos[]>({\r\n  key: \"memosState\",\r\n  default: [],\r\n});\r\n\r\n// 현재 위치한 코인페이지\r\nexport const currentCoinPage = atom<string | null>({\r\n  key: \"currentCoinPage\",\r\n  default: null,\r\n});\r\n\r\n// 코인 타입 리스트 모음\r\nexport const coinListObjState = atom<ICoin[] | null>({\r\n  key: \"coinListObjState\",\r\n  default: null,\r\n});\r\n\r\n// 현재 코인 페이지의 코인 목록만 가져옮\r\nexport const getOneCoinMemos = selector({\r\n  key: \"getOneCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    const currentPage = get(currentCoinPage);\r\n    return allMemos.filter((item) => item.coinType === currentPage);\r\n  },\r\n});\r\n\r\n// 전체 코인을 코인 타입으로 나누고, 메모 상태로 구분하여 보여준다\r\nexport const getAllCoinMemos = selector({\r\n  key: \"getAllCoinMemos\",\r\n  get: ({ get }) => {\r\n    const allMemos = get(memosState);\r\n    // 코인타입리스트 불러오기 (중복제거 처리하기)\r\n    const coinTypeList = Array.from(\r\n      new Set(allMemos?.map((item) => item.coinType))\r\n    );\r\n    // [[{},{}],[{},{},{}], ...];  형태로 쪼개기\r\n    return coinTypeList.map((coinType) => {\r\n      return allMemos.filter((memoObj) => memoObj.coinType === coinType);\r\n    });\r\n  },\r\n});\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CoinsList = styled.ul``;\r\n\r\nexport const Coin = styled.li`\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-out;\r\n    color: green;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nexport const Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nexport const Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`;\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchCoins } from \"@utils/api\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { isDartAtom } from \"@atoms/colorAtoms\";\r\nimport { coinListObjState, currentCoinPage } from \"@atoms/memosAtom\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\n\r\nimport { ICoin } from \"@models/coins\";\r\nimport {\r\n  Container,\r\n  Header,\r\n  CoinsList,\r\n  Coin,\r\n  Title,\r\n  Loader,\r\n  Img,\r\n} from \"@components/styledComponents/coins\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Coins = () => {\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n  console.log(\"data7879: \", data);\r\n  const [darkAtom, setDarkAtom] = useRecoilState(isDartAtom);\r\n  const setCoinObjList = useSetRecoilState(coinListObjState);\r\n  const setCurrentCoinPage = useSetRecoilState(currentCoinPage);\r\n  const navigate = useNavigate();\r\n\r\n  // 코인 이름 리스트 100개만 recoil의 coinListState에 저장\r\n  useEffect(() => {\r\n    if (data) {\r\n      setCoinObjList(data.slice(0, 100));\r\n      // 현재 페이지 null 처리를 위한 setCurrentCoinPage\r\n      setCurrentCoinPage(null);\r\n    }\r\n  }, [data]);\r\n\r\n  const toggleDarkAtom = useCallback(() => setDarkAtom((prev) => !prev), []);\r\n\r\n  const moveToMemos = () => {\r\n    navigate(\"/memos\");\r\n  };\r\n\r\n  // 이미지 에러시 다른 이미지 대체함수\r\n  const handleImgTagError = useCallback(\r\n    (event: React.SyntheticEvent<HTMLImageElement>) => {\r\n      event.currentTarget.src =\r\n        // \"https://www.kindacode.com/wp-content/uploads/2021/08/oops.png\";\r\n        `${process.env.PUBLIC_URL + \"/icons/_con.png\"}`;\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      <Header>\r\n        <title>코인</title>\r\n        {/* <button onClick={toggleDarkAtom}>Toggle Mode</button> */}\r\n        <DarkModeToggle\r\n          onChange={toggleDarkAtom}\r\n          checked={darkAtom}\r\n          size={80}\r\n        />\r\n        <button onClick={moveToMemos}>메모로 이동</button>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>\r\n          <RingLoader />\r\n        </Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/${coin.id}`,\r\n                }}\r\n                state={{ name: coin.name }}\r\n              >\r\n                <Img\r\n                  src={`${\r\n                    process.env.PUBLIC_URL\r\n                  }/icons/${coin.symbol.toLowerCase()}.png`}\r\n                  onError={handleImgTagError}\r\n                />\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Coins;\r\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport const fetchCoins = async () => {\r\n  const response = await (await fetch(`${BASE_URL}/coins`)).json();\r\n  return response;\r\n};\r\n\r\nexport const fetchCoinInfo = async (coinId?: string) => {\r\n  return await (await fetch(`${BASE_URL}/coins/${coinId}`)).json();\r\n};\r\n\r\n// export function fetchCoinInfo(coinId: string) {\r\n//   return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n//     response.json()\r\n//   );\r\n// }\r\n\r\nexport function fetchCoinTickers(coinId?: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId}`\r\n  ).then((response) => response.json());\r\n}\r\n"],"names":["MemoState","memosState","atom","key","default","currentCoinPage","coinListObjState","getOneCoinMemos","selector","get","allMemos","currentPage","filter","item","coinType","getAllCoinMemos","Array","from","Set","map","memoObj","Container","styled","Header","CoinsList","Coin","props","theme","textColor","bgColor","accentColor","Loader","Img","useQuery","fetchCoins","isLoading","data","console","log","useRecoilState","isDartAtom","darkAtom","setDarkAtom","setCoinObjList","useSetRecoilState","setCurrentCoinPage","navigate","useNavigate","useEffect","slice","toggleDarkAtom","useCallback","prev","handleImgTagError","event","currentTarget","src","process","Helmet","onChange","checked","size","onClick","coin","to","pathname","id","state","name","symbol","toLowerCase","onError","BASE_URL","fetch","json","response","fetchCoinInfo","coinId","fetchCoinTickers","then","fetchCoinHistory","Math","floor","Date","now"],"sourceRoot":""}